1. Basic Types
You can specify basic types like int, float, str, etc.

# Specifying an integer type
age: int = 25

# Specifying a string type
name: str = "Alice"

# Specifying a float type
height: float = 5.9

# Specifying a boolean type
is_student: bool = True

2. Complex Types
You can specify more complex types like List, Tuple, Dict, etc., using the typing module.


from typing import List, Dict, Tuple

# List of integers
numbers: List[int] = [1, 2, 3, 4]

# Dictionary with string keys and integer values
student_grades: Dict[str, int] = {"Alice": 90, "Bob": 85}

# Tuple of a string and an integer
person: Tuple[str, int] = ("Alice", 25)
3. Custom Types
For more complex or custom types, you can define your own classes and use them as type hints.


class Person:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

# Variable of type Person
person: Person = Person(name="Alice", age=30)
4. Optional Types
You can specify that a variable might also be None using Optional from the typing module.


from typing import Optional

# An integer that could also be None
optional_number: Optional[int] = None
5. Union Types
You can specify that a variable could be one of several types using Union.


from typing import Union

# A variable that can be either a string or an integer
value: Union[str, int] = "hello"
Example:

from typing import List, Dict, Optional, Union

name: str = "Alice"
age: int = 25
height: Optional[float] = None  # Could also be None
scores: List[int] = [95, 88, 92]
profile: Dict[str, Union[str, int]] = {"name": "Alice", "age": 25}
Notes:
Type hints are not enforced at runtime; they are mainly used for static analysis, code clarity, and documentation.
Tools like mypy can be used to check if the types match the hints in your code.
This is how you can specify types for variables in Python.